@import com.innovenso.townplanner.model.concepts.views.CompiledProjectMilestoneOverview
@import com.innovenso.townplan.io.context.OutputContext
@import com.innovenso.townplanner.model.TownPlan
@import play.twirl.api.TwirlFeatureImports._

@import txt.DocumentClass
@import latex.slides.lib.txt.SlideDeckPreamble
@import txt.CommonSettings
@import txt.Document
@import txt.DocumentTitle
@import latex.slides.lib.txt.Agenda
@import latex.slides.lib.txt.BeamerSettings
@import txt.Section
@import latex.slides.lib.txt.DescriptionSlides
@import latex.slides.lib.txt.Slide
@import txt.Environment
@import latex.lib.tables.txt.Table
@import com.innovenso.townplanner.io.latex.model.RaciTable
@import com.innovenso.townplanner.io.latex.model.ProjectMilestoneRaciTable
@import txt.SubSection
@import txt.Text
@import latex.lib.txt.Itemize
@import latex.lib.txt.Dictionary
@import com.innovenso.townplan.io.context.Pdf
@import latex.txt.FullPageTikzPictureEnvironment
@import com.innovenso.townplanner.io.latex.picture.context.TikzSecurityImpactDiagram
@import latex.txt.PositionedImage
@import latex.txt.PositionedText
@import com.innovenso.townplanner.io.latex.model.TinyFont
@import latex.slides.lib.txt.FullSlideImage
@import com.innovenso.townplanner.io.context.ProjectMilestoneCurrentStateDiagram
@import com.innovenso.townplan.io.context.Eps
@import latex.slides.lib.txt.LinkSlides
@import latex.slides.lib.txt.SWOTSlides
@import com.innovenso.townplanner.io.context.ProjectMilestoneTargetStateDiagram
@import com.innovenso.townplanner.io.context.ProjectMilestoneBusinessCapabilityImpactDiagram
@import com.innovenso.townplanner.io.context.ProjectMilestoneArchitectureBuildingBlockImpactDiagram
@import com.innovenso.townplanner.io.context.ProjectMilestoneArchitectureBuildingBlockImpactDiagram
@import com.innovenso.townplanner.io.context.ProjectMilestoneItPlatformImpactDiagram
@import com.innovenso.townplanner.io.context.ProjectMilestoneItPlatformImpactDiagram
@import com.innovenso.townplanner.io.context.ProjectMilestoneItSystemImpactDiagram
@import com.innovenso.townplanner.io.context.ProjectMilestoneItContainerImpactDiagram
@import com.innovenso.townplanner.io.context.ProjectMilestoneItSystemIntegrationImpactDiagram
@import com.innovenso.townplanner.io.context.ProjectMilestoneTechnologyImpactDiagram
@import com.innovenso.townplanner.io.latex.model.impact.ProjectMilestoneImpactOnIntegrationsTable
@import com.innovenso.townplanner.io.latex.model.impact.ProjectMilestoneImpactOnIntegrationsTable
@import latex.slides.lib.txt.ItSystemIntegrationSlides
@(view: CompiledProjectMilestoneOverview, outputContext: OutputContext)(implicit townPlan: TownPlan)
@if(view.decoratedProjectMilestone.isDefined) {
    @defining(view.decoratedProjectMilestone.get) { decoratedProjectMilestone =>
        @DocumentClass(name = "beamer", options = List("handout", "aspectratio=169"))
        @CommonSettings(townPlan)
        @BeamerSettings()
        @SlideDeckPreamble(title = Some(decoratedProjectMilestone.milestone.title), author = Some(decoratedProjectMilestone.responsible.map(_.title).mkString(",")), subtitle = decoratedProjectMilestone.project.map(_.title))
        @Document {
            @DocumentTitle()
            @Agenda()

            @Section("Context", condition = decoratedProjectMilestone.hasContext) {
                @DescriptionSlides(decoratedProjectMilestone.milestone, title = Some("Description"), subtitle = Some(decoratedProjectMilestone.milestone.title))
                @Slide(title = Some("RACI"), subtitle = Some(decoratedProjectMilestone.milestone.title)) {
                    @Environment("scriptsize") {
                        @Table(table = ProjectMilestoneRaciTable(decoratedProjectMilestone, 30).table)
                    }

                }

              @SubSection("Current Conditions", condition = decoratedProjectMilestone.hasCurrentConditions) {
                    @for(currentCondition <- decoratedProjectMilestone.milestone.currentState) {
                        @Slide(title = Some(currentCondition.title), subtitle = Some("Current Conditions")) {
                            @Text(currentCondition.description)
                        }
                    }
                    @for(currentStateDiagram <- outputContext.outputs(ofFileType = Some(Eps), ofOutputType = Some(ProjectMilestoneCurrentStateDiagram), forModelComponents = List(decoratedProjectMilestone.milestone))) {
                        @Slide(title=Some(currentStateDiagram.outputType.title), subtitle = Some(decoratedProjectMilestone.milestone.title)) {
                            @FullSlideImage(None, currentStateDiagram)
                        }
                    }


                }

                @SubSection("Goals", condition = decoratedProjectMilestone.hasGoals) {
                    @for(goal <- decoratedProjectMilestone.milestone.goals) {
                        @Slide(title = Some(goal.title), subtitle = Some("Goals")) {
                            @Text(goal.description)
                        }
                    }
                }
                @SubSection("Assumptions", condition = decoratedProjectMilestone.hasAssumptions) {
                    @for(assumption <- decoratedProjectMilestone.milestone.assumptions) {
                        @Slide(title = Some(assumption.title), subtitle = Some("Assumptions")) {
                            @Text(assumption.description)
                        }
                    }
                }

                @SubSection("Influencers & Stakeholders", condition = decoratedProjectMilestone.hasInfluencers || decoratedProjectMilestone.hasInfluencingPrinciples) {
                    @Slide(title = Some("People"), subtitle = Some("Influencers"), condition = decoratedProjectMilestone.hasInfluencers) {
                        @Itemize(decoratedProjectMilestone.influencers.map(_.title))
                    }
                    @Slide(title = Some("Principles"), subtitle = Some("Influencers"), condition = decoratedProjectMilestone.hasInfluencingPrinciples) {
                        @Dictionary(decoratedProjectMilestone.influencingPrinciples.map(p => (p.title, p.descriptions.headOption.map(_.value).getOrElse("-"))))
                    }
                    @Slide(Some("Stakeholders"), condition = decoratedProjectMilestone.hasStakeholders) {
                        @Itemize(decoratedProjectMilestone.stakeholders.map(_.title))
                    }
                }

            }

            @Section("Analysis", condition = decoratedProjectMilestone.hasRequirements) {

                @SubSection("Functional Requirements", condition = decoratedProjectMilestone.hasFunctionalRequirements) {
                    @for(requirement <- decoratedProjectMilestone.milestone.functionalRequirements) {
                        @Slide(title = Some(requirement.title), subtitle = Some(s"Functional Requirement - ${requirement.weight.name}")) {
                            @Text(requirement.description)
                        }
                    }
                }
                @SubSection("Quality Attribute Requirements", condition = decoratedProjectMilestone.hasQualityAttributeRequirements) {
                    @for(requirement <- decoratedProjectMilestone.milestone.qualityAttributeRequirements) {
                        @Slide(title = Some(requirement.title), subtitle = Some(s"QAR - ${requirement.weight.name}")) {
                            @Dictionary(requirement.descriptionList)
                        }
                    }
                }
                @SubSection("Constraints", condition = decoratedProjectMilestone.hasConstraints) {
                    @for(requirement <- decoratedProjectMilestone.milestone.constraints) {
                        @Slide(title = Some(requirement.title), subtitle = Some(s"Constraint - ${requirement.weight.name}")) {
                            @Text(requirement.description)
                        }
                    }
                }

                @SubSection("Security & Compliance", condition = decoratedProjectMilestone.hasSecurityImpact || decoratedProjectMilestone.hasComplianceImpact) {
                    @Slide(title = Some("Security & Compliance"), condition = decoratedProjectMilestone.hasSecurityImpact) {
                        @FullPageTikzPictureEnvironment() {
                            @for(securityImpactDiagram <- outputContext.outputs(ofFileType = Some(Pdf), ofOutputType = Some(TikzSecurityImpactDiagram), forView = Some(view.view), forModelComponents = List(decoratedProjectMilestone.milestone))) {
                                @PositionedImage(output = securityImpactDiagram, width = 50, position = (90, 90))
                            }
                            @PositionedText(width = 90, position = (0,90), configuration = List(TinyFont)) {
                                @Dictionary(decoratedProjectMilestone.milestone.complianceConcerns.map(concern => (concern.name, concern.description)))
                            }
                        }

                    }
                }

            }

            @Section("Solution") {
                @SubSection(title = "Target State") {
                    @for(targetStateDiagram <- outputContext.outputs(ofFileType = Some(Eps), ofOutputType = Some(ProjectMilestoneTargetStateDiagram), forModelComponents = List(decoratedProjectMilestone.milestone))) {
                        @Slide(title=Some(targetStateDiagram.outputType.title), subtitle = Some(decoratedProjectMilestone.milestone.title)) {
                            @FullSlideImage(None, targetStateDiagram)
                        }
                    }
                }
                @SubSection(title = "Impact", condition = decoratedProjectMilestone.hasImpact) {
                    @Slide(title=Some("Impact on Business Capabilities"), subtitle = Some(decoratedProjectMilestone.milestone.title), condition = decoratedProjectMilestone.hasImpactOnBusinessCapabilities) {
                      @for(impactDiagram <- outputContext.outputs(ofFileType = Some(Eps), ofOutputType = Some(ProjectMilestoneBusinessCapabilityImpactDiagram), forModelComponents = List(decoratedProjectMilestone.milestone) )) {
                        @FullSlideImage(None, impactDiagram)
                      }
                    }
                    @Slide(title=Some("Impact on Architecture Building Blocks"), subtitle = Some(decoratedProjectMilestone.milestone.title), condition = decoratedProjectMilestone.hasImpactOnBuildingBlocks) {
                        @for(impactDiagram <- outputContext.outputs(ofFileType = Some(Eps), ofOutputType = Some(ProjectMilestoneArchitectureBuildingBlockImpactDiagram), forModelComponents = List(decoratedProjectMilestone.milestone) )) {
                            @FullSlideImage(None, impactDiagram)
                        }
                    }
                    @Slide(title=Some("Impact on Platforms"), subtitle = Some(decoratedProjectMilestone.milestone.title), condition = decoratedProjectMilestone.hasImpactOnPlatforms) {
                        @for(impactDiagram <- outputContext.outputs(ofFileType = Some(Eps), ofOutputType = Some(ProjectMilestoneItPlatformImpactDiagram), forModelComponents = List(decoratedProjectMilestone.milestone) )) {
                            @FullSlideImage(None, impactDiagram)
                        }
                    }
                    @Slide(title=Some("Impact on Systems"), subtitle = Some(decoratedProjectMilestone.milestone.title), condition = decoratedProjectMilestone.hasImpactOnSystems) {
                        @for(impactDiagram <- outputContext.outputs(ofFileType = Some(Eps), ofOutputType = Some(ProjectMilestoneItSystemImpactDiagram), forModelComponents = List(decoratedProjectMilestone.milestone) )) {
                            @FullSlideImage(None, impactDiagram)
                        }
                    }
                    @Slide(title=Some("Impact on Containers"), subtitle = Some(decoratedProjectMilestone.milestone.title), condition = decoratedProjectMilestone.hasImpactOnContainers) {
                        @for(impactDiagram <- outputContext.outputs(ofFileType = Some(Eps), ofOutputType = Some(ProjectMilestoneItContainerImpactDiagram), forModelComponents = List(decoratedProjectMilestone.milestone) )) {
                            @FullSlideImage(None, impactDiagram)
                        }
                    }
                    @Slide(title=Some("Impact on System Integrations"), subtitle = Some(decoratedProjectMilestone.milestone.title), condition = decoratedProjectMilestone.hasImpactOnIntegrations) {
                        @for(impactDiagram <- outputContext.outputs(ofFileType = Some(Eps), ofOutputType = Some(ProjectMilestoneItSystemIntegrationImpactDiagram), forModelComponents = List(decoratedProjectMilestone.milestone) )) {
                            @FullSlideImage(None, impactDiagram)
                        }
                    }
                    @Slide(title=Some("Impact on Technologies"), subtitle = Some(decoratedProjectMilestone.milestone.title), condition = decoratedProjectMilestone.hasImpactOnTechnologies) {
                        @for(impactDiagram <- outputContext.outputs(ofFileType = Some(Eps), ofOutputType = Some(ProjectMilestoneTechnologyImpactDiagram), forModelComponents = List(decoratedProjectMilestone.milestone) )) {
                            @FullSlideImage(None, impactDiagram)
                        }
                    }
                }
                @SubSection(title = "Systems") {
                    Hello
                }
                @SubSection(title = "Integrations", condition = decoratedProjectMilestone.hasImpactOnIntegrations) {
                    @Slide(title = Some("Impacted Integrations - Overview"), subtitle = Some(decoratedProjectMilestone.milestone.title)) {
                        @Environment("tiny") {
                            @Table(table = ProjectMilestoneImpactOnIntegrationsTable(view).table)
                        }
                    }
                    @ItSystemIntegrationSlides(decoratedProjectMilestone.addedIntegrations.toList.sortBy(_.sortKey), Some(s"added by ${decoratedProjectMilestone.milestone.title}"), outputContext)
                    @ItSystemIntegrationSlides(decoratedProjectMilestone.changedIntegrations.toList.sortBy(_.sortKey), Some(s"changed by ${decoratedProjectMilestone.milestone.title}"), outputContext)
                }
              @SubSection(title = "Considerations") {
                 Hello
              }
            }

            @Section("Cost & Consequences") {


                @SubSection("Consequences", decoratedProjectMilestone.hasConsequences) {
                    @for(consequence <- decoratedProjectMilestone.milestone.consequences) {
                        @Slide(title = Some(consequence.title), subtitle = if (consequence.title == "Consequence") None else Some("Consequence")) {
                            @Text(consequence.description)
                        }
                    }

                }

            }

            @Section("Appendix", decoratedProjectMilestone.hasLinks) {
                @LinkSlides(decoratedProjectMilestone.milestone)
            }

        }
        }
}
