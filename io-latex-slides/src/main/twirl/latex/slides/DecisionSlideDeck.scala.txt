@import com.innovenso.townplanner.model.concepts.views.CompiledArchitectureDecisionRecord
@import com.innovenso.townplanner.model.concepts.views.CompiledArchitectureDecisionRecord
@import com.innovenso.townplanner.model.meta.Key
@import com.innovenso.townplanner.model.TownPlan
@import txt.DocumentClass
@import txt.CommonSettings
@import latex.slides.lib.txt.BeamerSettings
@import latex.slides.lib.txt.SlideDeckPreamble
@import txt.Document
@import txt.DocumentTitle
@import latex.slides.lib.txt.Agenda
@import txt.Section
@import latex.slides.lib.txt.Slide
@import txt.Text
@import latex.slides.lib.txt.TaskToDo
@import latex.slides.lib.txt.TaskComplete
@import latex.slides.lib.txt.SymbolBackground
@import play.twirl.api.TwirlFeatureImports._
@import latex.slides.lib.txt.DescriptionSlides
@import latex.slides.lib.txt.LinkSlides
@import com.innovenso.townplanner.model.concepts.NotStarted
@import com.innovenso.townplanner.io.latex.LatexFormat
@import com.innovenso.townplanner.io.latex.LatexFormat
@import com.innovenso.townplanner.model.concepts.InProgress
@import latex.slides.lib.txt.TaskInProgress
@import com.innovenso.townplanner.model.concepts.Decided
@import txt.SubSection
@import latex.lib.tables.txt.Table
@import com.innovenso.townplanner.io.latex.model.RaciTable
@import txt.Environment
@import latex.lib.txt.Itemize
@import latex.lib.txt.Dictionary
@import com.innovenso.townplan.io.context.OutputContext
@import com.innovenso.townplan.io.context.Pdf
@import com.innovenso.townplanner.io.latex.picture.context.TikzSecurityImpactDiagram
@import latex.txt.PositionedImage
@import txt.Paragraph
@import latex.txt.PositionedText
@import com.innovenso.townplanner.io.latex.model.TinyFont
@import latex.txt.FullPageTikzPictureEnvironment
@import latex.slides.lib.txt.SWOTSlides
@import com.innovenso.townplanner.io.latex.picture.context.TikzRequirementScoreSpiderDiagram
@import latex.slides.lib.txt.FullSlideImage
@import latex.slides.lib.txt.CostImpactSlides
@(view: CompiledArchitectureDecisionRecord, decisionKey: Key, outputContext: OutputContext)(implicit townPlan: TownPlan)
@if(view.decoratedDecision(decisionKey).isDefined) {
@defining(view.decoratedDecision(decisionKey).get) { decoratedDecision =>
@DocumentClass(name = "beamer", options = List("handout", "aspectratio=169"))
@CommonSettings(townPlan)
@BeamerSettings()
@SlideDeckPreamble(title = Some(decoratedDecision.decision.title), author = Some(decoratedDecision.responsible.map(_.title).mkString(",")), subtitle = Some("Architecture Decision"))
@Document {
    @DocumentTitle()
    @Agenda()

    @Section("Context", condition = decoratedDecision.hasContext) {
      @DescriptionSlides(decoratedDecision.decision, title = Some("What are we deciding?"), subtitle = Some(decoratedDecision.decision.title))
      @Slide(title = Some("Status and RACI")) {
        @decoratedDecision.decision.status match {
          case NotStarted => {
            @TaskToDo() @LatexFormat.escape(text = decoratedDecision.decision.status.name + decoratedDecision.decision.dueDate.map(ft => s", due on ${ft.date}").getOrElse(""))
          }
          case InProgress => {
            @TaskInProgress() @LatexFormat.escape(text = decoratedDecision.decision.status.name + decoratedDecision.decision.dueDate.map(ft => s", due on ${ft.date}").getOrElse(""))
          }
          case Decided => {
              @TaskComplete() @LatexFormat.escape(text = decoratedDecision.decision.status.name + decoratedDecision.decision.doneDate.map(ft => s", decided on ${ft.date}").getOrElse(""))
          }
        }

        @Environment("scriptsize") {
            @Table(table = RaciTable(decoratedDecision, 30).table)
        }

      }


        @SubSection("Current Conditions", condition = decoratedDecision.hasCurrentConditions) {
            @for(currentCondition <- decoratedDecision.decision.currentState) {
                @Slide(title = Some(currentCondition.title), subtitle = Some("Current Conditions")) {
                    @Text(currentCondition.description)
                }
            }
        }

        @SubSection("Goals", condition = decoratedDecision.hasGoals) {
            @for(goal <- decoratedDecision.decision.goals) {
                @Slide(title = Some(goal.title), subtitle = Some("Goals")) {
                    @Text(goal.description)
                }
            }
        }
        @SubSection("Assumptions", condition = decoratedDecision.hasAssumptions) {
            @for(assumption <- decoratedDecision.decision.assumptions) {
                @Slide(title = Some(assumption.title), subtitle = Some("Assumptions")) {
                    @Text(assumption.description)
                }
            }
        }
        @SubSection("Open Questions", condition = decoratedDecision.hasOpenQuestions) {
            @for(openQuestion <- decoratedDecision.decision.openQuestions) {
                @Slide(title = Some(openQuestion.title), subtitle = Some("Open Questions")) {
                    @Text(openQuestion.description)
                }
            }
        }

        @SubSection("Influencers & Stakeholders", condition = decoratedDecision.hasInfluencers || decoratedDecision.hasInfluencingPrinciples) {
            @Slide(title = Some("People"), subtitle = Some("Influencers"), condition = decoratedDecision.hasInfluencers) {
                @Itemize(decoratedDecision.influencers.map(_.title))
            }
            @Slide(title = Some("Principles"), subtitle = Some("Influencers"), condition = decoratedDecision.hasInfluencingPrinciples) {
                @Dictionary(decoratedDecision.influencingPrinciples.map(p => (p.title, p.descriptions.headOption.map(_.value).getOrElse("-"))))
            }
            @Slide(Some("Stakeholders"), condition = decoratedDecision.hasStakeholders) {
                @Itemize(decoratedDecision.stakeholders.map(_.title))
            }
        }

        @SubSection("Security & Compliance", condition = decoratedDecision.hasSecurityImpact || decoratedDecision.hasComplianceImpact) {
            @Slide(title = Some("Security & Compliance"), condition = decoratedDecision.hasSecurityImpact) {
              @FullPageTikzPictureEnvironment() {
                  @for(securityImpactDiagram <- outputContext.outputs(ofFileType = Some(Pdf), ofOutputType = Some(TikzSecurityImpactDiagram), forView = Some(view.view), forModelComponents = List(decoratedDecision.decision))) {
                      @PositionedImage(output = securityImpactDiagram, width = 50, position = (90, 90))
                  }
                  @PositionedText(width = 90, position = (0,90), configuration = List(TinyFont)) {
                      @Dictionary(decoratedDecision.decision.complianceConcerns.map(concern => (concern.name, concern.description)))
                  }
              }

            }
        }
    }

    @Section("Analysis", condition = decoratedDecision.hasRequirements) {

        @SubSection("Functional Requirements", condition = decoratedDecision.hasFunctionalRequirements) {
          @for(requirement <- decoratedDecision.decision.functionalRequirements) {
            @Slide(title = Some(requirement.title), subtitle = Some(s"Functional Requirement - ${requirement.weight.name}")) {
              @Text(requirement.description)
            }
          }
        }
        @SubSection("Quality Attribute Requirements", condition = decoratedDecision.hasQualityAttributeRequirements) {
            @for(requirement <- decoratedDecision.decision.qualityAttributeRequirements) {
                @Slide(title = Some(requirement.title), subtitle = Some(s"QAR - ${requirement.weight.name}")) {
                    @Dictionary(requirement.descriptionList)
                }
            }
        }
        @SubSection("Constraints", condition = decoratedDecision.hasConstraints) {
            @for(requirement <- decoratedDecision.decision.constraints) {
                @Slide(title = Some(requirement.title), subtitle = Some(s"Constraint - ${requirement.weight.name}")) {
                    @Text(requirement.description)
                }
            }
        }


    }

    @Section("Options Considered") {
        @for(decisionOption <- decoratedDecision.options) {
            @SubSection(decisionOption.option.title) {
                @DescriptionSlides(decisionOption.option, title = Some("Description"), subtitle = Some(decisionOption.option.title))
                @LinkSlides(decisionOption.option)
                @SWOTSlides(decisionOption.option, subtitle = Some(decisionOption.option.title))
                @for(spiderDiagram <- outputContext.outputs(ofFileType = Some(Pdf), ofOutputType = Some(TikzRequirementScoreSpiderDiagram), forView = Some(view.view), forModelComponents = List(decoratedDecision.decision, decisionOption.option))) {
                    @Slide(title=Some("Requirements match"), subtitle = Some(decisionOption.option.title)) {
                        @FullSlideImage(None, spiderDiagram)
                    }
                }
                @CostImpactSlides(decisionOption)
            }
        }
    }

    @Section("Outcome", decoratedDecision.hasOutcome && decoratedDecision.hasConsequences) {
        @SubSection("Conclusion", decoratedDecision.hasOutcome) {
          @Slide(title = Some("Conclusion")) {
              @Text(decoratedDecision.decision.outcome)
          }
        }
        @SubSection("Consequences", decoratedDecision.hasConsequences) {
            @for(consequence <- decoratedDecision.decision.consequences) {
                @Slide(title = Some(consequence.title), subtitle = if (consequence.title == "Consequence") None else Some("Consequence")) {
                    @Text(consequence.description)
                }
            }

        }
    }

    @Section("Appendix", decoratedDecision.hasLinks) {
        @LinkSlides(decoratedDecision.decision)
    }

}
}}