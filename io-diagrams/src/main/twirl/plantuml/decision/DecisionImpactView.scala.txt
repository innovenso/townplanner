@import plantuml.lib.txt.MindMap
@import plantuml.lib.txt.MindMapNode
@import plantuml.project.txt.AddedRemovedChangedElements
@import com.innovenso.townplanner.model.concepts.views.CompiledProjectMilestoneImpactView
@import plantuml.lib.txt.DescriptionWrapped
@import com.innovenso.townplanner.model.concepts.ItProject
@import com.innovenso.townplanner.model.concepts.relationships.CanBeImpacted
@import com.innovenso.townplanner.model.concepts.properties.HasDescription
@import com.innovenso.townplanner.model.language.Concept
@import com.innovenso.townplanner.model.concepts.views.CompiledDecisionImpactView
@(view: CompiledDecisionImpactView, impactedClass: Class[_ <: Concept with CanBeImpacted with HasDescription], elementColor: String, elementSprite: String)
@MindMap {
sprite $aCapability jar:archimate/strategy-capability
sprite $aFunction jar:archimate/business-function
sprite $aBuildingBlock jar:archimate/application-function
sprite $aInteraction jar:archimate/application-interaction
sprite $aSystem jar:archimate/application-component
sprite $aPlatform jar:archimate/application-component
sprite $aContainer jar:archimate/application-component
sprite $aTechnology jar:archimate/system-software
sprite $aDecision jar:archimate/motivation-outcome
@MindMapNode(color = "MOTIVATION", title=view.decision.title, description = Option(DescriptionWrapped(view.decision).body), depth = 1, sprite = "aDecision")
@AddedRemovedChangedElements(added = view.added(impactedClass), removed = view.removed(impactedClass), changed = view.changed(impactedClass), elementColor = elementColor, elementSprite = elementSprite, startAtDepth=2)
}