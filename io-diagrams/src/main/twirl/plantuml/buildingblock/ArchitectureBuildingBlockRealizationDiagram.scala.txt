@import plantuml.lib.concepts.txt._
@import plantuml.lib.relationships.txt.Relations
@import com.innovenso.townplanner.model.concepts.views.CompiledArchitectureBuildingBlockRealizationView
@import plantuml.lib.txt.Uml
@import com.innovenso.townplanner.model.concepts.relationships.Composition
@import com.innovenso.townplanner.model.concepts.relationships.Serving
@import com.innovenso.townplanner.model.concepts.relationships.Serving
@import com.innovenso.townplanner.model.concepts.relationships.Realization
@(model: CompiledArchitectureBuildingBlockRealizationView)
@Uml {
    @if(model.buildingBlock.nonEmpty) {
        @ArchitectureBuildingBlock(buildingBlock = model.buildingBlock.get, pointInTime = model.pointInTime)

        @Enterprises(enterprises = model.enterprises, pointInTime = model.pointInTime)

        @BusinessCapabilities(capabilities = model.businessCapabilities)

        @Platforms(platforms = model.platforms, pointInTime = model.pointInTime)

        @Systems(systems = model.systems, pointInTime = model.pointInTime)

        @Containers(containers = model.containers, pointInTime = model.pointInTime, technologyHolder = model)

        @Relations(relationships = model.relationshipsWithType(classOf[Composition]))
        @Relations(relationships = model.relationshipsWithType(classOf[Serving]))
        @Relations(relationships = model.relationshipsWithType(classOf[Realization]))

    }
}