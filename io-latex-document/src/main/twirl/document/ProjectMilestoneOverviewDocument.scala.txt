@import com.innovenso.townplanner.model.concepts.views.CompiledArchitectureDecisionRecord
@import txt.KaoBook
@import txt.Document
@import txt.Preamble
@import txt.DocumentTitle
@import txt.FrontMatter
@import txt.MainMatter
@import txt.Chapter
@import txt.Text
@import latex.lib.txt.Description
@import txt.Section
@import txt.Paragraph
@import txt.SubSection
@import txt.SubSubSection
@import latex.lib.txt.Itemize
@import latex.lib.txt.Dictionary
@import latex.lib.tables.txt.Table
@import latex.lib.tables.txt.WideTable
@import latex.lib.txt.FunctionalRequirements
@import latex.lib.txt.QualityAttributeRequirements
@import latex.lib.txt.Constraints
@import com.innovenso.townplanner.model.TownPlan
@import latex.lib.tables.txt.LongTable
@import com.innovenso.townplan.io.context.OutputContext
@import com.innovenso.townplan.io.context.Pdf
@import com.innovenso.townplanner.io.latex.picture.context.TikzRequirementScoreSpiderDiagram
@import txt.Image
@import latex.lib.txt.Date
@import com.innovenso.townplanner.io.latex.picture.context.TikzSecurityImpactDiagram
@import com.innovenso.townplanner.io.latex.model.RaciTable
@import com.innovenso.townplanner.io.latex.model.DecisionOptionPricingTables
@import com.innovenso.townplanner.io.latex.model.DecisionOptionRequirementsMatchTable
@import txt.InnovensoBook
@import latex.lib.book.txt.BookTitlePage
@import latex.lib.book.txt.BookTableOfContents
@import txt.Part
@import com.innovenso.townplanner.model.concepts.views.CompiledProjectMilestoneOverview
@import play.twirl.api.TwirlFeatureImports._
@import com.innovenso.townplanner.io.latex.model.ProjectMilestoneRaciTable
@import latex.lib.book.txt.ProjectMilestoneContextIllustrationImages
@import com.innovenso.townplan.io.context.Eps
@import com.innovenso.townplanner.io.context.ProjectMilestoneBusinessCapabilityImpactDiagram
@import com.innovenso.townplanner.io.context.ProjectMilestoneArchitectureBuildingBlockImpactDiagram
@import com.innovenso.townplanner.io.context.ProjectMilestoneItPlatformImpactDiagram
@import com.innovenso.townplanner.io.context.ProjectMilestoneItSystemImpactDiagram
@import com.innovenso.townplanner.io.latex.model.impact.ProjectMilestoneImpactOnSystemsTable
@import com.innovenso.townplanner.io.latex.model.impact.ProjectMilestoneImpactOnIntegrationsTable
@import com.innovenso.townplanner.io.context.ProjectMilestoneItContainerImpactDiagram
@import com.innovenso.townplanner.io.context.ProjectMilestoneItSystemIntegrationImpactDiagram
@import com.innovenso.townplanner.io.context.ProjectMilestoneTechnologyImpactDiagram
@import com.innovenso.townplanner.io.latex.model.ProjectMilestonePricingTables
@(townPlan: TownPlan, outputContext: OutputContext, view: CompiledProjectMilestoneOverview)
@if(view.decoratedProjectMilestone.isDefined) {
    @defining(view.decoratedProjectMilestone.get) { decoratedProjectMilestone =>
        @InnovensoBook(townPlan)
        @Document {
            @BookTitlePage(title = view.decoratedProjectMilestone.map(ms => ms.milestone.title), author = None, subtitle = view.decoratedProjectMilestone.flatMap(_.project).map(p => s"Milestone of ${p.title}"))
            @BookTableOfContents()

            @Chapter("Context", condition = decoratedProjectMilestone.hasContext) {
              @Section("Description", condition = decoratedProjectMilestone.hasDescriptions) {
                  @for( description <- decoratedProjectMilestone.milestone.descriptions) {
                      @Text(description.value)
                  }
              }
              @Section("RACI") {
                  @Table(table = ProjectMilestoneRaciTable(decoratedProjectMilestone, 30).table)
              }


                @Section("Current Conditions", condition = decoratedProjectMilestone.hasCurrentConditions) {
                    @Dictionary(items = decoratedProjectMilestone.milestone.currentState.map(state => (state.title, state.description)))
                    @for(currentCondition <- decoratedProjectMilestone.milestone.currentState) {
                      @ProjectMilestoneContextIllustrationImages(context = currentCondition, subtitle = Some("Current Conditions"), outputContext = outputContext, decoratedProjectView = decoratedProjectMilestone)
                    }
                }

                @Section("Goals", condition = decoratedProjectMilestone.hasGoals) {
                    @Dictionary(items = decoratedProjectMilestone.milestone.goals.map(state => (state.title, state.description)))
                    @for(goal <- decoratedProjectMilestone.milestone.goals) {
                        @ProjectMilestoneContextIllustrationImages(context = goal, subtitle = Some("Goals"), outputContext = outputContext, decoratedProjectView = decoratedProjectMilestone)
                    }
                }

                @Section("Assumptions", condition = decoratedProjectMilestone.hasAssumptions) {
                    @Dictionary(items = decoratedProjectMilestone.milestone.assumptions.map(state => (state.title, state.description)))
                    @for(assumption <- decoratedProjectMilestone.milestone.assumptions) {
                        @ProjectMilestoneContextIllustrationImages(context = assumption, subtitle = Some("Assumptions"), outputContext = outputContext, decoratedProjectView = decoratedProjectMilestone)
                    }
                }

                @Section("Influencers & Stakeholders", condition = decoratedProjectMilestone.hasInfluencers || decoratedProjectMilestone.hasInfluencingPrinciples) {
                    @SubSection(title = "People", condition = decoratedProjectMilestone.hasInfluencers) {
                        @Itemize(decoratedProjectMilestone.influencers.map(_.title))
                    }
                    @SubSection(title = "Principles", condition = decoratedProjectMilestone.hasInfluencingPrinciples) {
                        @Dictionary(decoratedProjectMilestone.influencingPrinciples.map(p => (p.title, p.descriptions.headOption.map(_.value).getOrElse("-"))))
                    }
                    @SubSection("Stakeholders", condition = decoratedProjectMilestone.hasStakeholders) {
                        @Itemize(decoratedProjectMilestone.stakeholders.map(_.title))
                    }
                }
            }

            @Chapter("Analysis", condition = decoratedProjectMilestone.hasRequirements) {

                @Section("Functional Requirements", condition = decoratedProjectMilestone.hasFunctionalRequirements) {
                    @for(requirement <- decoratedProjectMilestone.milestone.functionalRequirements) {
                      @SubSection(title = s"${requirement.title} - ${requirement.weight.name}") {
                          @Text(requirement.description)
                      }
                    }
                }
                @Section("Quality Attribute Requirements", condition = decoratedProjectMilestone.hasQualityAttributeRequirements) {
                    @for(requirement <- decoratedProjectMilestone.milestone.qualityAttributeRequirements) {
                        @SubSection(title = s"${requirement.title} - ${requirement.weight.name}") {
                            @Dictionary(requirement.descriptionList)
                        }
                    }
                }
                @Section("Constraints", condition = decoratedProjectMilestone.hasConstraints) {
                    @for(requirement <- decoratedProjectMilestone.milestone.constraints) {
                        @SubSection(title = s"${requirement.title} - ${requirement.weight.name}") {
                            @Text(requirement.description)
                        }
                    }
                }

                @Section("Security & Compliance", condition = decoratedProjectMilestone.hasSecurityImpact || decoratedProjectMilestone.hasComplianceImpact) {
                            @for(securityImpactDiagram <- outputContext.outputs(ofFileType = Some(Pdf), ofOutputType = Some(TikzSecurityImpactDiagram), forView = Some(view.view), forModelComponents = List(decoratedProjectMilestone.milestone))) {
                                @Image(Some("Security Impact"), output = securityImpactDiagram)
                            }
                            @Dictionary(decoratedProjectMilestone.milestone.complianceConcerns.map(concern => (concern.name, concern.description)))

                }

            }

            @Chapter("Solution") {
                @Section(title = "Solution Description", condition = decoratedProjectMilestone.hasSolutions) {
                    @for(solution <- decoratedProjectMilestone.milestone.solutions) {
                        @SubSection(title = solution.title) {
                            @Text(solution.description)
                        }
                        @ProjectMilestoneContextIllustrationImages(context = solution, subtitle = if (solution.title == "Solution") None else Some("Solution"), outputContext = outputContext, decoratedProjectView = decoratedProjectMilestone)

                    }

                }

                @Section(title = "Impact",  condition = decoratedProjectMilestone.hasImpact) {
                        @for(impactDiagram <- outputContext.outputs(ofFileType = Some(Eps), ofOutputType = Some(ProjectMilestoneBusinessCapabilityImpactDiagram), forModelComponents = List(decoratedProjectMilestone.milestone) )) {
                            @Image(Some("Impact on Business Capabilities"), impactDiagram)
                        }
                        @for(impactDiagram <- outputContext.outputs(ofFileType = Some(Eps), ofOutputType = Some(ProjectMilestoneArchitectureBuildingBlockImpactDiagram), forModelComponents = List(decoratedProjectMilestone.milestone) )) {
                            @Image(Some("Impact on Architecture Building Blocks"), impactDiagram)
                        }
                        @for(impactDiagram <- outputContext.outputs(ofFileType = Some(Eps), ofOutputType = Some(ProjectMilestoneItPlatformImpactDiagram), forModelComponents = List(decoratedProjectMilestone.milestone) )) {
                            @Image(Some("Impact on Platforms"), impactDiagram)
                        }
                        @for(impactDiagram <- outputContext.outputs(ofFileType = Some(Eps), ofOutputType = Some(ProjectMilestoneItSystemImpactDiagram), forModelComponents = List(decoratedProjectMilestone.milestone) )) {
                            @Image(Some("Impact on Systems"), impactDiagram)
                        }
                        @for(impactDiagram <- outputContext.outputs(ofFileType = Some(Eps), ofOutputType = Some(ProjectMilestoneItContainerImpactDiagram), forModelComponents = List(decoratedProjectMilestone.milestone) )) {
                            @Image(Some("Impact on Containers"), impactDiagram)
                        }
                        @for(impactDiagram <- outputContext.outputs(ofFileType = Some(Eps), ofOutputType = Some(ProjectMilestoneItSystemIntegrationImpactDiagram), forModelComponents = List(decoratedProjectMilestone.milestone) )) {
                            @Image(Some("Impact on System Integrations"), impactDiagram)
                        }
                        @for(impactDiagram <- outputContext.outputs(ofFileType = Some(Eps), ofOutputType = Some(ProjectMilestoneTechnologyImpactDiagram), forModelComponents = List(decoratedProjectMilestone.milestone) )) {
                            @Image(Some("Impact on Technologies"), impactDiagram)
                        }
                }
                @SubSection(title = "Impacted Systems", condition = decoratedProjectMilestone.hasImpactOnSystems) {
                            @LongTable(table = ProjectMilestoneImpactOnSystemsTable(view).table)
                }
                @SubSection(title = "Impacted Integrations", condition = decoratedProjectMilestone.hasImpactOnIntegrations) {
                            @LongTable(table = ProjectMilestoneImpactOnIntegrationsTable(view).table)
                }
            }

            @Chapter(title = "Cost & Consequences", condition = decoratedProjectMilestone.hasConsequences) {

                @Section("Cost Impact", decoratedProjectMilestone.hasCostImpact) {
                    \scriptsize

                    @for(table <- ProjectMilestonePricingTables(decoratedProjectMilestone).tables) {
                        @LongTable(table = table, title = None)
                    }

                    \normalsize
                }

                @Section(title = "Consequences", condition = decoratedProjectMilestone.hasConsequences) {
                    @for(consequence <- decoratedProjectMilestone.milestone.consequences) {
                        @SubSection(title = consequence.title) {
                            @Text(consequence.description)
                        }
                        @ProjectMilestoneContextIllustrationImages(context = consequence, None, outputContext = outputContext, decoratedProjectView = decoratedProjectMilestone)

                    }

                }

            }



        }
    }}