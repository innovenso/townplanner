@import com.innovenso.townplanner.model.concepts.views.CompiledArchitectureDecisionRecord
@import txt.KaoBook
@import txt.Document
@import txt.Preamble
@import txt.DocumentTitle
@import txt.FrontMatter
@import txt.BookTableOfContents
@import txt.MainMatter
@import txt.Chapter
@import txt.Text
@import latex.lib.txt.Description
@import txt.Section
@import txt.Paragraph
@import txt.SubSection
@import txt.SubSubSection
@import latex.lib.txt.Itemize
@import latex.lib.txt.Dictionary
@import latex.lib.tables.txt.Table
@import com.innovenso.townplanner.io.latex.document.model.RaciTable
@import latex.lib.tables.txt.WideTable
@import latex.lib.txt.FunctionalRequirements
@import latex.lib.txt.QualityAttributeRequirements
@import latex.lib.txt.Constraints
@import com.innovenso.townplanner.model.TownPlan
@import com.innovenso.townplanner.io.latex.document.model.DecisionOptionPricingTables
@import latex.lib.tables.txt.LongTable
@import com.innovenso.townplanner.io.latex.document.model.DecisionOptionRequirementsMatchTable
@import com.innovenso.townplanner.io.latex.document.model.DecisionOptionRequirementsMatchTable
@import com.innovenso.townplan.io.context.OutputContext
@import com.innovenso.townplan.io.context.Pdf
@import com.innovenso.townplanner.io.latex.picture.context.TikzRequirementScoreSpiderDiagram
@import txt.Image
@import latex.lib.txt.MarginLinks
@import latex.lib.txt.Date
@(townPlan: TownPlan, outputContext: OutputContext, view: CompiledArchitectureDecisionRecord)
@KaoBook(townPlan)
@Document {
    @Preamble(title = Some(view.title), author = None, titleHead = Some("Innovenso Townplanner"))
    @DocumentTitle()
    @FrontMatter()
    @BookTableOfContents()
    @MainMatter()

    @for(decoratedDecision <- view.decoratedDecisions) {
      @Chapter(decoratedDecision.decision.title) {
        @Section("Context", condition = decoratedDecision.hasContext) {
            @MarginLinks(decoratedDecision.decision)
            @Description(decoratedDecision.decision)

            @SubSection("Status and Due Date") {
              @Paragraph("Status") { @Text(decoratedDecision.decision.status.name) }
              @Paragraph("Due Date", decoratedDecision.hasDueDate) {
                @Date(decoratedDecision.decision.dueDate)
              }

            }

            @SubSection("Current Conditions", condition = decoratedDecision.hasCurrentConditions) {
                @for(currentCondition <- decoratedDecision.decision.currentState) {
                  @Paragraph(currentCondition.title) {
                    @Text(currentCondition.description)
                  }
                }
            }
            @SubSection("Goals", condition = decoratedDecision.hasGoals) {
              @for(goal <- decoratedDecision.decision.goals) {
                  @Paragraph(goal.title) {
                      @Text(goal.description)
                  }
              }
            }
            @SubSection("Assumptions", condition = decoratedDecision.hasAssumptions) {
              @for(assumption <- decoratedDecision.decision.assumptions) {
                  @Paragraph(assumption.title) {
                      @Text(assumption.description)
                  }
              }
            }


            @WideTable(table = RaciTable(decoratedDecision).table, title = Some(decoratedDecision.decision.title + " - RACI"))


              @SubSection("Influencers", condition = decoratedDecision.hasInfluencers || decoratedDecision.hasInfluencingPrinciples) {
                      @SubSubSection("People", condition = decoratedDecision.hasInfluencers) {
                          @Itemize(decoratedDecision.influencers.map(_.title))
                      }
                  @SubSubSection("Principles", condition = decoratedDecision.hasInfluencingPrinciples) {
                      @Dictionary(decoratedDecision.influencingPrinciples.map(p => (p.title, p.descriptions.headOption.map(_.value).getOrElse("-"))))
                  }
              }
            @SubSection("Stakeholders", condition = decoratedDecision.hasStakeholders) {
                    @Itemize(decoratedDecision.stakeholders.map(_.title))
            }
        }

        @Section("Analysis", condition = decoratedDecision.hasRequirements) {
          @SubSection("Functional Requirements", condition = decoratedDecision.hasFunctionalRequirements) {
            @FunctionalRequirements(decoratedDecision.decision.functionalRequirements, forBook = true)
          }
            @SubSection("Quality Attribute Requirements", condition = decoratedDecision.hasQualityAttributeRequirements) {
                @QualityAttributeRequirements(decoratedDecision.decision.qualityAttributeRequirements, forBook = true)
            }
            @SubSection("Constraints", condition = decoratedDecision.hasConstraints) {
                @Constraints(decoratedDecision.decision.constraints, forBook = true)
            }
        }

        @Section("Options Considered") {
          @for(decisionOption <- decoratedDecision.options) {
            @SubSection(decisionOption.option.title) {
                @MarginLinks(decisionOption.option)
                @Description(decisionOption.option)

                @SubSubSection("SWOT Analysis", condition = decisionOption.hasSWOT) {
                    @Paragraph("Strenghts", condition = decisionOption.hasStrengths) {
                      @Itemize(decisionOption.option.strengths.map(_.description))
                    }
                    @Paragraph("Weaknesses", condition = decisionOption.hasWeaknesses) {
                      @Itemize(decisionOption.option.weaknesses.map(_.description))
                    }
                    @Paragraph("Opportunities", condition = decisionOption.hasOpportunities) {
                      @Itemize(decisionOption.option.opportunities.map(_.description))
                    }
                    @Paragraph("Threats", condition = decisionOption.hasThreats) {
                      @Itemize(decisionOption.option.threats.map(_.description))
                    }
                }

                @SubSubSection("Requirement Scoring", decisionOption.hasRequirementScores) {
                    @for(spiderDiagram <- outputContext.outputs(ofFileType = Some(Pdf), ofOutputType = Some(TikzRequirementScoreSpiderDiagram), forView = Some(view.view), forModelComponents = List(decoratedDecision.decision, decisionOption.option))) {
                        @Image(Some(s"${decisionOption.option.title} Requirement Scores"), spiderDiagram)
                    }
                    \scriptsize

                        @LongTable(table = DecisionOptionRequirementsMatchTable(decisionOption).table, title = None)

                    \normalsize
                }

                @SubSubSection("Cost Impact", decisionOption.hasCostImpact) {
                    \scriptsize

                    @for(table <- DecisionOptionPricingTables(decisionOption).tables) {
                        @LongTable(table = table, title = None)
                    }

                    \normalsize
                }

            }
          }
        }

        @Section("Outcome", decoratedDecision.hasOutcome && decoratedDecision.hasConsequences) {
          @SubSection("Conclusion", decoratedDecision.hasOutcome) {
              @Text(decoratedDecision.decision.outcome)
          }
          @SubSection("Consequences", decoratedDecision.hasConsequences) {
              @for(consequence <- decoratedDecision.decision.consequences) {
                  @Paragraph(consequence.title) {
                      @Text(consequence.description)
                  }
              }

          }
        }
      }
    }
}